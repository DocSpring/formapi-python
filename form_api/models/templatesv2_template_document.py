# coding: utf-8

"""
    API v1

    FormAPI is a service that helps you fill out and sign PDF templates.  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Templatesv2TemplateDocument(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'metadata': 'Templatesv2TemplateDocumentMetadata',
        'id': 'str',
        'storage': 'str'
    }

    attribute_map = {
        'metadata': 'metadata',
        'id': 'id',
        'storage': 'storage'
    }

    def __init__(self, metadata=None, id=None, storage=None):  # noqa: E501
        """Templatesv2TemplateDocument - a model defined in OpenAPI"""  # noqa: E501

        self._metadata = None
        self._id = None
        self._storage = None
        self.discriminator = None

        if metadata is not None:
            self.metadata = metadata
        if id is not None:
            self.id = id
        if storage is not None:
            self.storage = storage

    @property
    def metadata(self):
        """Gets the metadata of this Templatesv2TemplateDocument.  # noqa: E501


        :return: The metadata of this Templatesv2TemplateDocument.  # noqa: E501
        :rtype: Templatesv2TemplateDocumentMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Templatesv2TemplateDocument.


        :param metadata: The metadata of this Templatesv2TemplateDocument.  # noqa: E501
        :type: Templatesv2TemplateDocumentMetadata
        """

        self._metadata = metadata

    @property
    def id(self):
        """Gets the id of this Templatesv2TemplateDocument.  # noqa: E501


        :return: The id of this Templatesv2TemplateDocument.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Templatesv2TemplateDocument.


        :param id: The id of this Templatesv2TemplateDocument.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def storage(self):
        """Gets the storage of this Templatesv2TemplateDocument.  # noqa: E501


        :return: The storage of this Templatesv2TemplateDocument.  # noqa: E501
        :rtype: str
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this Templatesv2TemplateDocument.


        :param storage: The storage of this Templatesv2TemplateDocument.  # noqa: E501
        :type: str
        """
        allowed_values = ["cache"]  # noqa: E501
        if storage not in allowed_values:
            raise ValueError(
                "Invalid value for `storage` ({0}), must be one of {1}"  # noqa: E501
                .format(storage, allowed_values)
            )

        self._storage = storage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Templatesv2TemplateDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
