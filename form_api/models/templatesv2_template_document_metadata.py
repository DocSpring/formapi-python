# coding: utf-8

"""
    API v1

    FormAPI is a service that helps you fill out and sign PDF templates.  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Templatesv2TemplateDocumentMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'filename': 'str',
        'size': 'int',
        'mime_type': 'str'
    }

    attribute_map = {
        'filename': 'filename',
        'size': 'size',
        'mime_type': 'mime_type'
    }

    def __init__(self, filename=None, size=None, mime_type=None):  # noqa: E501
        """Templatesv2TemplateDocumentMetadata - a model defined in OpenAPI"""  # noqa: E501

        self._filename = None
        self._size = None
        self._mime_type = None
        self.discriminator = None

        if filename is not None:
            self.filename = filename
        if size is not None:
            self.size = size
        if mime_type is not None:
            self.mime_type = mime_type

    @property
    def filename(self):
        """Gets the filename of this Templatesv2TemplateDocumentMetadata.  # noqa: E501


        :return: The filename of this Templatesv2TemplateDocumentMetadata.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Templatesv2TemplateDocumentMetadata.


        :param filename: The filename of this Templatesv2TemplateDocumentMetadata.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def size(self):
        """Gets the size of this Templatesv2TemplateDocumentMetadata.  # noqa: E501


        :return: The size of this Templatesv2TemplateDocumentMetadata.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Templatesv2TemplateDocumentMetadata.


        :param size: The size of this Templatesv2TemplateDocumentMetadata.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def mime_type(self):
        """Gets the mime_type of this Templatesv2TemplateDocumentMetadata.  # noqa: E501


        :return: The mime_type of this Templatesv2TemplateDocumentMetadata.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Templatesv2TemplateDocumentMetadata.


        :param mime_type: The mime_type of this Templatesv2TemplateDocumentMetadata.  # noqa: E501
        :type: str
        """
        allowed_values = ["application/pdf"]  # noqa: E501
        if mime_type not in allowed_values:
            raise ValueError(
                "Invalid value for `mime_type` ({0}), must be one of {1}"  # noqa: E501
                .format(mime_type, allowed_values)
            )

        self._mime_type = mime_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Templatesv2TemplateDocumentMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
