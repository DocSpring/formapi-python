# coding: utf-8

"""
    API v1

    FormAPI is a service that helps you fill out and sign PDF templates.  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SubmissionAction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'integration_id': 'str',
        'state': 'str',
        'action_category': 'str',
        'action_type': 'str',
        'result_data': 'object'
    }

    attribute_map = {
        'id': 'id',
        'integration_id': 'integration_id',
        'state': 'state',
        'action_category': 'action_category',
        'action_type': 'action_type',
        'result_data': 'result_data'
    }

    def __init__(self, id=None, integration_id=None, state=None, action_category=None, action_type=None, result_data=None):  # noqa: E501
        """SubmissionAction - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._integration_id = None
        self._state = None
        self._action_category = None
        self._action_type = None
        self._result_data = None
        self.discriminator = None

        self.id = id
        self.integration_id = integration_id
        self.state = state
        self.action_category = action_category
        self.action_type = action_type
        self.result_data = result_data

    @property
    def id(self):
        """Gets the id of this SubmissionAction.  # noqa: E501


        :return: The id of this SubmissionAction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubmissionAction.


        :param id: The id of this SubmissionAction.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def integration_id(self):
        """Gets the integration_id of this SubmissionAction.  # noqa: E501


        :return: The integration_id of this SubmissionAction.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this SubmissionAction.


        :param integration_id: The integration_id of this SubmissionAction.  # noqa: E501
        :type: str
        """
        if integration_id is None:
            raise ValueError("Invalid value for `integration_id`, must not be `None`")  # noqa: E501

        self._integration_id = integration_id

    @property
    def state(self):
        """Gets the state of this SubmissionAction.  # noqa: E501


        :return: The state of this SubmissionAction.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SubmissionAction.


        :param state: The state of this SubmissionAction.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["pending", "processed", "failed", "error"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def action_category(self):
        """Gets the action_category of this SubmissionAction.  # noqa: E501


        :return: The action_category of this SubmissionAction.  # noqa: E501
        :rtype: str
        """
        return self._action_category

    @action_category.setter
    def action_category(self, action_category):
        """Sets the action_category of this SubmissionAction.


        :param action_category: The action_category of this SubmissionAction.  # noqa: E501
        :type: str
        """
        if action_category is None:
            raise ValueError("Invalid value for `action_category`, must not be `None`")  # noqa: E501
        allowed_values = ["notification", "file_upload"]  # noqa: E501
        if action_category not in allowed_values:
            raise ValueError(
                "Invalid value for `action_category` ({0}), must be one of {1}"  # noqa: E501
                .format(action_category, allowed_values)
            )

        self._action_category = action_category

    @property
    def action_type(self):
        """Gets the action_type of this SubmissionAction.  # noqa: E501


        :return: The action_type of this SubmissionAction.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this SubmissionAction.


        :param action_type: The action_type of this SubmissionAction.  # noqa: E501
        :type: str
        """
        if action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")  # noqa: E501
        allowed_values = ["webhook", "slack_webhook", "email", "aws_s3_upload"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"  # noqa: E501
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def result_data(self):
        """Gets the result_data of this SubmissionAction.  # noqa: E501


        :return: The result_data of this SubmissionAction.  # noqa: E501
        :rtype: object
        """
        return self._result_data

    @result_data.setter
    def result_data(self, result_data):
        """Sets the result_data of this SubmissionAction.


        :param result_data: The result_data of this SubmissionAction.  # noqa: E501
        :type: object
        """
        if result_data is None:
            raise ValueError("Invalid value for `result_data`, must not be `None`")  # noqa: E501

        self._result_data = result_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmissionAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
