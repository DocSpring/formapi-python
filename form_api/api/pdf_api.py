# coding: utf-8

"""
    API v1

    FormAPI is a service that helps you fill out and sign PDF templates.  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from form_api.api_client import ApiClient


class PDFApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def batch_generate_pdf_v1(self, template_id, request_body, **kwargs):  # noqa: E501
        """Generates multiple PDFs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_generate_pdf_v1(template_id, request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: (required)
        :param list[object] request_body: (required)
        :return: list[CreateSubmissionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_generate_pdf_v1_with_http_info(template_id, request_body, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_generate_pdf_v1_with_http_info(template_id, request_body, **kwargs)  # noqa: E501
            return data

    def batch_generate_pdf_v1_with_http_info(self, template_id, request_body, **kwargs):  # noqa: E501
        """Generates multiple PDFs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_generate_pdf_v1_with_http_info(template_id, request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: (required)
        :param list[object] request_body: (required)
        :return: list[CreateSubmissionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['template_id', 'request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_generate_pdf_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in local_var_params or
                local_var_params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `batch_generate_pdf_v1`")  # noqa: E501
        # verify the required parameter 'request_body' is set
        if ('request_body' not in local_var_params or
                local_var_params['request_body'] is None):
            raise ValueError("Missing the required parameter `request_body` when calling `batch_generate_pdf_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in local_var_params:
            path_params['template_id'] = local_var_params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/templates/{template_id}/submissions/batch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CreateSubmissionResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_generate_pdfs(self, submission_batch_data, **kwargs):  # noqa: E501
        """Generates multiple PDFs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_generate_pdfs(submission_batch_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SubmissionBatchData submission_batch_data: (required)
        :return: CreateSubmissionBatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_generate_pdfs_with_http_info(submission_batch_data, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_generate_pdfs_with_http_info(submission_batch_data, **kwargs)  # noqa: E501
            return data

    def batch_generate_pdfs_with_http_info(self, submission_batch_data, **kwargs):  # noqa: E501
        """Generates multiple PDFs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_generate_pdfs_with_http_info(submission_batch_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SubmissionBatchData submission_batch_data: (required)
        :return: CreateSubmissionBatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['submission_batch_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_generate_pdfs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'submission_batch_data' is set
        if ('submission_batch_data' not in local_var_params or
                local_var_params['submission_batch_data'] is None):
            raise ValueError("Missing the required parameter `submission_batch_data` when calling `batch_generate_pdfs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'submission_batch_data' in local_var_params:
            body_params = local_var_params['submission_batch_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/submissions/batches', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateSubmissionBatchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def combine_pdfs(self, combine_pdfs_data, **kwargs):  # noqa: E501
        """Merge submission PDFs, template PDFs, or custom files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.combine_pdfs(combine_pdfs_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CombinePdfsData combine_pdfs_data: (required)
        :return: CreateCombinedSubmissionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.combine_pdfs_with_http_info(combine_pdfs_data, **kwargs)  # noqa: E501
        else:
            (data) = self.combine_pdfs_with_http_info(combine_pdfs_data, **kwargs)  # noqa: E501
            return data

    def combine_pdfs_with_http_info(self, combine_pdfs_data, **kwargs):  # noqa: E501
        """Merge submission PDFs, template PDFs, or custom files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.combine_pdfs_with_http_info(combine_pdfs_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CombinePdfsData combine_pdfs_data: (required)
        :return: CreateCombinedSubmissionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['combine_pdfs_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method combine_pdfs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'combine_pdfs_data' is set
        if ('combine_pdfs_data' not in local_var_params or
                local_var_params['combine_pdfs_data'] is None):
            raise ValueError("Missing the required parameter `combine_pdfs_data` when calling `combine_pdfs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'combine_pdfs_data' in local_var_params:
            body_params = local_var_params['combine_pdfs_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/combined_submissions?v=2', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateCombinedSubmissionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def combine_submissions(self, combined_submission_data, **kwargs):  # noqa: E501
        """Merge generated PDFs together  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.combine_submissions(combined_submission_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CombinedSubmissionData combined_submission_data: (required)
        :return: CreateCombinedSubmissionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.combine_submissions_with_http_info(combined_submission_data, **kwargs)  # noqa: E501
        else:
            (data) = self.combine_submissions_with_http_info(combined_submission_data, **kwargs)  # noqa: E501
            return data

    def combine_submissions_with_http_info(self, combined_submission_data, **kwargs):  # noqa: E501
        """Merge generated PDFs together  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.combine_submissions_with_http_info(combined_submission_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CombinedSubmissionData combined_submission_data: (required)
        :return: CreateCombinedSubmissionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['combined_submission_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method combine_submissions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'combined_submission_data' is set
        if ('combined_submission_data' not in local_var_params or
                local_var_params['combined_submission_data'] is None):
            raise ValueError("Missing the required parameter `combined_submission_data` when calling `combine_submissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'combined_submission_data' in local_var_params:
            body_params = local_var_params['combined_submission_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/combined_submissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateCombinedSubmissionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_custom_file_from_upload(self, create_custom_file_data, **kwargs):  # noqa: E501
        """Create a new custom file from a cached presign upload  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_custom_file_from_upload(create_custom_file_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCustomFileData create_custom_file_data: (required)
        :return: CreateCustomFileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_custom_file_from_upload_with_http_info(create_custom_file_data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_custom_file_from_upload_with_http_info(create_custom_file_data, **kwargs)  # noqa: E501
            return data

    def create_custom_file_from_upload_with_http_info(self, create_custom_file_data, **kwargs):  # noqa: E501
        """Create a new custom file from a cached presign upload  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_custom_file_from_upload_with_http_info(create_custom_file_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCustomFileData create_custom_file_data: (required)
        :return: CreateCustomFileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['create_custom_file_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_custom_file_from_upload" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'create_custom_file_data' is set
        if ('create_custom_file_data' not in local_var_params or
                local_var_params['create_custom_file_data'] is None):
            raise ValueError("Missing the required parameter `create_custom_file_data` when calling `create_custom_file_from_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_custom_file_data' in local_var_params:
            body_params = local_var_params['create_custom_file_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/custom_files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateCustomFileResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_data_request_token(self, data_request_id, **kwargs):  # noqa: E501
        """Creates a new data request token for form authentication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_data_request_token(data_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_request_id: (required)
        :return: CreateSubmissionDataRequestTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_data_request_token_with_http_info(data_request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_data_request_token_with_http_info(data_request_id, **kwargs)  # noqa: E501
            return data

    def create_data_request_token_with_http_info(self, data_request_id, **kwargs):  # noqa: E501
        """Creates a new data request token for form authentication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_data_request_token_with_http_info(data_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_request_id: (required)
        :return: CreateSubmissionDataRequestTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_data_request_token" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'data_request_id' is set
        if ('data_request_id' not in local_var_params or
                local_var_params['data_request_id'] is None):
            raise ValueError("Missing the required parameter `data_request_id` when calling `create_data_request_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_request_id' in local_var_params:
            path_params['data_request_id'] = local_var_params['data_request_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/data_requests/{data_request_id}/tokens', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateSubmissionDataRequestTokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_folder(self, create_folder_data, **kwargs):  # noqa: E501
        """Create a folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_folder(create_folder_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateFolderData create_folder_data: (required)
        :return: Folder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_folder_with_http_info(create_folder_data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_folder_with_http_info(create_folder_data, **kwargs)  # noqa: E501
            return data

    def create_folder_with_http_info(self, create_folder_data, **kwargs):  # noqa: E501
        """Create a folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_folder_with_http_info(create_folder_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateFolderData create_folder_data: (required)
        :return: Folder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['create_folder_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_folder" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'create_folder_data' is set
        if ('create_folder_data' not in local_var_params or
                local_var_params['create_folder_data'] is None):
            raise ValueError("Missing the required parameter `create_folder_data` when calling `create_folder`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_folder_data' in local_var_params:
            body_params = local_var_params['create_folder_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/folders/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Folder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_template(self, template_document, template_name, **kwargs):  # noqa: E501
        """Upload a new PDF template with a file upload  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template(template_document, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file template_document: (required)
        :param str template_name: (required)
        :param str template_parent_folder_id:
        :return: PendingTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_template_with_http_info(template_document, template_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_template_with_http_info(template_document, template_name, **kwargs)  # noqa: E501
            return data

    def create_template_with_http_info(self, template_document, template_name, **kwargs):  # noqa: E501
        """Upload a new PDF template with a file upload  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_with_http_info(template_document, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file template_document: (required)
        :param str template_name: (required)
        :param str template_parent_folder_id:
        :return: PendingTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['template_document', 'template_name', 'template_parent_folder_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_template" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'template_document' is set
        if ('template_document' not in local_var_params or
                local_var_params['template_document'] is None):
            raise ValueError("Missing the required parameter `template_document` when calling `create_template`")  # noqa: E501
        # verify the required parameter 'template_name' is set
        if ('template_name' not in local_var_params or
                local_var_params['template_name'] is None):
            raise ValueError("Missing the required parameter `template_name` when calling `create_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'template_document' in local_var_params:
            local_var_files['template[document]'] = local_var_params['template_document']  # noqa: E501
        if 'template_name' in local_var_params:
            form_params.append(('template[name]', local_var_params['template_name']))  # noqa: E501
        if 'template_parent_folder_id' in local_var_params:
            form_params.append(('template[parent_folder_id]', local_var_params['template_parent_folder_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PendingTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_template_from_upload(self, create_template_data, **kwargs):  # noqa: E501
        """Create a new PDF template from a cached presign upload  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_from_upload(create_template_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateData create_template_data: (required)
        :return: PendingTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_template_from_upload_with_http_info(create_template_data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_template_from_upload_with_http_info(create_template_data, **kwargs)  # noqa: E501
            return data

    def create_template_from_upload_with_http_info(self, create_template_data, **kwargs):  # noqa: E501
        """Create a new PDF template from a cached presign upload  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_template_from_upload_with_http_info(create_template_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateTemplateData create_template_data: (required)
        :return: PendingTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['create_template_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_template_from_upload" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'create_template_data' is set
        if ('create_template_data' not in local_var_params or
                local_var_params['create_template_data'] is None):
            raise ValueError("Missing the required parameter `create_template_data` when calling `create_template_from_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_template_data' in local_var_params:
            body_params = local_var_params['create_template_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/templates?v=2', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PendingTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_folder(self, folder_id, **kwargs):  # noqa: E501
        """Delete a folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_folder(folder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder_id: (required)
        :return: Folder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_folder_with_http_info(folder_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_folder_with_http_info(folder_id, **kwargs)  # noqa: E501
            return data

    def delete_folder_with_http_info(self, folder_id, **kwargs):  # noqa: E501
        """Delete a folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_folder_with_http_info(folder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder_id: (required)
        :return: Folder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['folder_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_folder" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'folder_id' is set
        if ('folder_id' not in local_var_params or
                local_var_params['folder_id'] is None):
            raise ValueError("Missing the required parameter `folder_id` when calling `delete_folder`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folder_id' in local_var_params:
            path_params['folder_id'] = local_var_params['folder_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/folders/{folder_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Folder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def expire_combined_submission(self, combined_submission_id, **kwargs):  # noqa: E501
        """Expire a combined submission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.expire_combined_submission(combined_submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str combined_submission_id: (required)
        :return: CombinedSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.expire_combined_submission_with_http_info(combined_submission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.expire_combined_submission_with_http_info(combined_submission_id, **kwargs)  # noqa: E501
            return data

    def expire_combined_submission_with_http_info(self, combined_submission_id, **kwargs):  # noqa: E501
        """Expire a combined submission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.expire_combined_submission_with_http_info(combined_submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str combined_submission_id: (required)
        :return: CombinedSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['combined_submission_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method expire_combined_submission" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'combined_submission_id' is set
        if ('combined_submission_id' not in local_var_params or
                local_var_params['combined_submission_id'] is None):
            raise ValueError("Missing the required parameter `combined_submission_id` when calling `expire_combined_submission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'combined_submission_id' in local_var_params:
            path_params['combined_submission_id'] = local_var_params['combined_submission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/combined_submissions/{combined_submission_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CombinedSubmission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def expire_submission(self, submission_id, **kwargs):  # noqa: E501
        """Expire a PDF submission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.expire_submission(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: (required)
        :return: Submission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.expire_submission_with_http_info(submission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.expire_submission_with_http_info(submission_id, **kwargs)  # noqa: E501
            return data

    def expire_submission_with_http_info(self, submission_id, **kwargs):  # noqa: E501
        """Expire a PDF submission  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.expire_submission_with_http_info(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: (required)
        :return: Submission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['submission_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method expire_submission" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in local_var_params or
                local_var_params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `expire_submission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'submission_id' in local_var_params:
            path_params['submission_id'] = local_var_params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/submissions/{submission_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Submission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_pdf(self, template_id, submission_data, **kwargs):  # noqa: E501
        """Generates a new PDF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_pdf(template_id, submission_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: (required)
        :param SubmissionData submission_data: (required)
        :return: CreateSubmissionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_pdf_with_http_info(template_id, submission_data, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_pdf_with_http_info(template_id, submission_data, **kwargs)  # noqa: E501
            return data

    def generate_pdf_with_http_info(self, template_id, submission_data, **kwargs):  # noqa: E501
        """Generates a new PDF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_pdf_with_http_info(template_id, submission_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: (required)
        :param SubmissionData submission_data: (required)
        :return: CreateSubmissionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['template_id', 'submission_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_pdf" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in local_var_params or
                local_var_params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `generate_pdf`")  # noqa: E501
        # verify the required parameter 'submission_data' is set
        if ('submission_data' not in local_var_params or
                local_var_params['submission_data'] is None):
            raise ValueError("Missing the required parameter `submission_data` when calling `generate_pdf`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in local_var_params:
            path_params['template_id'] = local_var_params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'submission_data' in local_var_params:
            body_params = local_var_params['submission_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/templates/{template_id}/submissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateSubmissionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_combined_submission(self, combined_submission_id, **kwargs):  # noqa: E501
        """Check the status of a combined submission (merged PDFs)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_combined_submission(combined_submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str combined_submission_id: (required)
        :return: CombinedSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_combined_submission_with_http_info(combined_submission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_combined_submission_with_http_info(combined_submission_id, **kwargs)  # noqa: E501
            return data

    def get_combined_submission_with_http_info(self, combined_submission_id, **kwargs):  # noqa: E501
        """Check the status of a combined submission (merged PDFs)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_combined_submission_with_http_info(combined_submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str combined_submission_id: (required)
        :return: CombinedSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['combined_submission_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_combined_submission" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'combined_submission_id' is set
        if ('combined_submission_id' not in local_var_params or
                local_var_params['combined_submission_id'] is None):
            raise ValueError("Missing the required parameter `combined_submission_id` when calling `get_combined_submission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'combined_submission_id' in local_var_params:
            path_params['combined_submission_id'] = local_var_params['combined_submission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/combined_submissions/{combined_submission_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CombinedSubmission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_data_request(self, data_request_id, **kwargs):  # noqa: E501
        """Look up a submission data request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_request(data_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_request_id: (required)
        :return: SubmissionDataRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_data_request_with_http_info(data_request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_data_request_with_http_info(data_request_id, **kwargs)  # noqa: E501
            return data

    def get_data_request_with_http_info(self, data_request_id, **kwargs):  # noqa: E501
        """Look up a submission data request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_request_with_http_info(data_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_request_id: (required)
        :return: SubmissionDataRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_data_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'data_request_id' is set
        if ('data_request_id' not in local_var_params or
                local_var_params['data_request_id'] is None):
            raise ValueError("Missing the required parameter `data_request_id` when calling `get_data_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_request_id' in local_var_params:
            path_params['data_request_id'] = local_var_params['data_request_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/data_requests/{data_request_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubmissionDataRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_presign_url(self, **kwargs):  # noqa: E501
        """Get a presigned URL so that you can upload a file to our AWS S3 bucket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_presign_url(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_presign_url_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_presign_url_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_presign_url_with_http_info(self, **kwargs):  # noqa: E501
        """Get a presigned URL so that you can upload a file to our AWS S3 bucket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_presign_url_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_presign_url" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/uploads/presign', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_submission(self, submission_id, **kwargs):  # noqa: E501
        """Check the status of a PDF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_submission(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: (required)
        :param bool include_data:
        :return: Submission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_submission_with_http_info(submission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_submission_with_http_info(submission_id, **kwargs)  # noqa: E501
            return data

    def get_submission_with_http_info(self, submission_id, **kwargs):  # noqa: E501
        """Check the status of a PDF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_submission_with_http_info(submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_id: (required)
        :param bool include_data:
        :return: Submission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['submission_id', 'include_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_submission" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in local_var_params or
                local_var_params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `get_submission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'submission_id' in local_var_params:
            path_params['submission_id'] = local_var_params['submission_id']  # noqa: E501

        query_params = []
        if 'include_data' in local_var_params:
            query_params.append(('include_data', local_var_params['include_data']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/submissions/{submission_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Submission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_submission_batch(self, submission_batch_id, **kwargs):  # noqa: E501
        """Check the status of a submission batch job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_submission_batch(submission_batch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_batch_id: (required)
        :param bool include_submissions:
        :return: SubmissionBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_submission_batch_with_http_info(submission_batch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_submission_batch_with_http_info(submission_batch_id, **kwargs)  # noqa: E501
            return data

    def get_submission_batch_with_http_info(self, submission_batch_id, **kwargs):  # noqa: E501
        """Check the status of a submission batch job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_submission_batch_with_http_info(submission_batch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str submission_batch_id: (required)
        :param bool include_submissions:
        :return: SubmissionBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['submission_batch_id', 'include_submissions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_submission_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'submission_batch_id' is set
        if ('submission_batch_id' not in local_var_params or
                local_var_params['submission_batch_id'] is None):
            raise ValueError("Missing the required parameter `submission_batch_id` when calling `get_submission_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'submission_batch_id' in local_var_params:
            path_params['submission_batch_id'] = local_var_params['submission_batch_id']  # noqa: E501

        query_params = []
        if 'include_submissions' in local_var_params:
            query_params.append(('include_submissions', local_var_params['include_submissions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/submissions/batches/{submission_batch_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubmissionBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template(self, template_id, **kwargs):  # noqa: E501
        """Get a single template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: (required)
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_template_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Get a single template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: (required)
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in local_var_params or
                local_var_params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in local_var_params:
            path_params['template_id'] = local_var_params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/templates/{template_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Template',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_schema(self, template_id, **kwargs):  # noqa: E501
        """Fetch the JSON schema for a template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_schema(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_template_schema_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_schema_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_template_schema_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Fetch the JSON schema for a template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_template_schema_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_schema" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in local_var_params or
                local_var_params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_template_schema`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in local_var_params:
            path_params['template_id'] = local_var_params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/templates/{template_id}/schema', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_folders(self, **kwargs):  # noqa: E501
        """Get a list of all folders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_folders(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parent_folder_id: Filter By Folder Id
        :return: list[Folder]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_folders_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_folders_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_folders_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all folders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_folders_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parent_folder_id: Filter By Folder Id
        :return: list[Folder]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent_folder_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_folders" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'parent_folder_id' in local_var_params:
            query_params.append(('parent_folder_id', local_var_params['parent_folder_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/folders/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Folder]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_templates(self, **kwargs):  # noqa: E501
        """Get a list of all templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_templates(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search By Name
        :param str parent_folder_id: Filter By Folder Id
        :param int page: Default: 1
        :param int per_page: Default: 50
        :return: list[Template]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_templates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_templates_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_templates_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_templates_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search By Name
        :param str parent_folder_id: Filter By Folder Id
        :param int page: Default: 1
        :param int per_page: Default: 50
        :return: list[Template]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['query', 'parent_folder_id', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_templates" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'page' in local_var_params and local_var_params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `list_templates`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] > 50:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `list_templates`, must be a value less than or equal to `50`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `list_templates`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in local_var_params:
            query_params.append(('query', local_var_params['query']))  # noqa: E501
        if 'parent_folder_id' in local_var_params:
            query_params.append(('parent_folder_id', local_var_params['parent_folder_id']))  # noqa: E501
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'per_page' in local_var_params:
            query_params.append(('per_page', local_var_params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Template]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def move_folder_to_folder(self, folder_id, move_folder_data, **kwargs):  # noqa: E501
        """Move a folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_folder_to_folder(folder_id, move_folder_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder_id: (required)
        :param MoveFolderData move_folder_data: (required)
        :return: Folder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.move_folder_to_folder_with_http_info(folder_id, move_folder_data, **kwargs)  # noqa: E501
        else:
            (data) = self.move_folder_to_folder_with_http_info(folder_id, move_folder_data, **kwargs)  # noqa: E501
            return data

    def move_folder_to_folder_with_http_info(self, folder_id, move_folder_data, **kwargs):  # noqa: E501
        """Move a folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_folder_to_folder_with_http_info(folder_id, move_folder_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder_id: (required)
        :param MoveFolderData move_folder_data: (required)
        :return: Folder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['folder_id', 'move_folder_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method move_folder_to_folder" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'folder_id' is set
        if ('folder_id' not in local_var_params or
                local_var_params['folder_id'] is None):
            raise ValueError("Missing the required parameter `folder_id` when calling `move_folder_to_folder`")  # noqa: E501
        # verify the required parameter 'move_folder_data' is set
        if ('move_folder_data' not in local_var_params or
                local_var_params['move_folder_data'] is None):
            raise ValueError("Missing the required parameter `move_folder_data` when calling `move_folder_to_folder`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folder_id' in local_var_params:
            path_params['folder_id'] = local_var_params['folder_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'move_folder_data' in local_var_params:
            body_params = local_var_params['move_folder_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/folders/{folder_id}/move', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Folder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def move_template_to_folder(self, template_id, move_template_data, **kwargs):  # noqa: E501
        """Move Template to folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_template_to_folder(template_id, move_template_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: (required)
        :param MoveTemplateData move_template_data: (required)
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.move_template_to_folder_with_http_info(template_id, move_template_data, **kwargs)  # noqa: E501
        else:
            (data) = self.move_template_to_folder_with_http_info(template_id, move_template_data, **kwargs)  # noqa: E501
            return data

    def move_template_to_folder_with_http_info(self, template_id, move_template_data, **kwargs):  # noqa: E501
        """Move Template to folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_template_to_folder_with_http_info(template_id, move_template_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: (required)
        :param MoveTemplateData move_template_data: (required)
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['template_id', 'move_template_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method move_template_to_folder" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in local_var_params or
                local_var_params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `move_template_to_folder`")  # noqa: E501
        # verify the required parameter 'move_template_data' is set
        if ('move_template_data' not in local_var_params or
                local_var_params['move_template_data'] is None):
            raise ValueError("Missing the required parameter `move_template_data` when calling `move_template_to_folder`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in local_var_params:
            path_params['template_id'] = local_var_params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'move_template_data' in local_var_params:
            body_params = local_var_params['move_template_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/templates/{template_id}/move', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Template',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rename_folder(self, folder_id, rename_folder_data, **kwargs):  # noqa: E501
        """Rename a folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rename_folder(folder_id, rename_folder_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder_id: (required)
        :param RenameFolderData rename_folder_data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rename_folder_with_http_info(folder_id, rename_folder_data, **kwargs)  # noqa: E501
        else:
            (data) = self.rename_folder_with_http_info(folder_id, rename_folder_data, **kwargs)  # noqa: E501
            return data

    def rename_folder_with_http_info(self, folder_id, rename_folder_data, **kwargs):  # noqa: E501
        """Rename a folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rename_folder_with_http_info(folder_id, rename_folder_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder_id: (required)
        :param RenameFolderData rename_folder_data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['folder_id', 'rename_folder_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rename_folder" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'folder_id' is set
        if ('folder_id' not in local_var_params or
                local_var_params['folder_id'] is None):
            raise ValueError("Missing the required parameter `folder_id` when calling `rename_folder`")  # noqa: E501
        # verify the required parameter 'rename_folder_data' is set
        if ('rename_folder_data' not in local_var_params or
                local_var_params['rename_folder_data'] is None):
            raise ValueError("Missing the required parameter `rename_folder_data` when calling `rename_folder`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folder_id' in local_var_params:
            path_params['folder_id'] = local_var_params['folder_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'rename_folder_data' in local_var_params:
            body_params = local_var_params['rename_folder_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/folders/{folder_id}/rename', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_authentication(self, **kwargs):  # noqa: E501
        """Test Authentication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_authentication(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AuthenticationSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_authentication_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_authentication_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_authentication_with_http_info(self, **kwargs):  # noqa: E501
        """Test Authentication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_authentication_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AuthenticationSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_authentication" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/authentication', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthenticationSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_data_request(self, data_request_id, update_submission_data_request_data, **kwargs):  # noqa: E501
        """Update a submission data request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_data_request(data_request_id, update_submission_data_request_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_request_id: (required)
        :param UpdateSubmissionDataRequestData update_submission_data_request_data: (required)
        :return: UpdateDataRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_data_request_with_http_info(data_request_id, update_submission_data_request_data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_data_request_with_http_info(data_request_id, update_submission_data_request_data, **kwargs)  # noqa: E501
            return data

    def update_data_request_with_http_info(self, data_request_id, update_submission_data_request_data, **kwargs):  # noqa: E501
        """Update a submission data request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_data_request_with_http_info(data_request_id, update_submission_data_request_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_request_id: (required)
        :param UpdateSubmissionDataRequestData update_submission_data_request_data: (required)
        :return: UpdateDataRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data_request_id', 'update_submission_data_request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_data_request" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'data_request_id' is set
        if ('data_request_id' not in local_var_params or
                local_var_params['data_request_id'] is None):
            raise ValueError("Missing the required parameter `data_request_id` when calling `update_data_request`")  # noqa: E501
        # verify the required parameter 'update_submission_data_request_data' is set
        if ('update_submission_data_request_data' not in local_var_params or
                local_var_params['update_submission_data_request_data'] is None):
            raise ValueError("Missing the required parameter `update_submission_data_request_data` when calling `update_data_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_request_id' in local_var_params:
            path_params['data_request_id'] = local_var_params['data_request_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_submission_data_request_data' in local_var_params:
            body_params = local_var_params['update_submission_data_request_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token_basic']  # noqa: E501

        return self.api_client.call_api(
            '/data_requests/{data_request_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateDataRequestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
